plugins {
	id 'java-gradle-plugin'
	id 'jvm-test-suite'
	id 'org.jetbrains.kotlin.jvm' version '2.0.21'
	id 'nokeebuild.publishing'
	id 'nokeebuild.signing'
	id 'nokeebuild.use-junit-platform-in-test-suites'
	id 'nokeebuild.use-latest-java-lts-in-test-suites'
}

group = 'dev.nokee'
version = '1.0-milestone-3'
description = 'Unified publishing for multiplatform projects.'

repositories {
	mavenCentral()
}

java {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

import org.jetbrains.kotlin.gradle.dsl.JvmTarget
kotlin {
	compilerOptions {
		jvmTarget = JvmTarget.JVM_1_8
	}
}

tasks.named('javadoc', Javadoc) {
	options {
		windowTitle 'Nokee Multiplatform Publishing'
		showFromPublic()

		addStringOption('Xdoclint:all,-missing')
	}
}

gradlePlugin {
	website = 'https://nokee.dev'
	vcsUrl = 'https://github.com/nokeedev/nokee-multiplatform-publishing'
	plugins {
		multiplatformPublishing {
			id = 'dev.nokee.multiplatform-publishing'
			implementationClass = 'dev.nokee.publishing.multiplatform.MultiplatformPublishingPlugin'
			displayName = 'Nokee Multiplatform Publishing'
			description = 'Provides multiplatform publishing capability to Gradle.'
			tags = ['publishing', 'maven-publish', 'ivy-publish', 'multiplatform']
		}
	}

	dependencies {
		implementation libs.nokee.commons.backports // DependencyFactory
		implementation libs.nokee.commons.names
		implementation libs.nokee.commons.gradle // NamedDomainObjectRegistry, traverse, ignored
	}
}

testing {
	suites {
		test {
			dependencies {
				implementation 'dev.nokee.commons:commons-hamcrest:latest.integration'
				implementation 'dev.nokee.templates:nokee-code-templates:latest.integration'
				implementation 'dev.gradleplugins:gradle-runner-kit:latest.release'
				implementation 'dev.nokee.commons:test-gradle-projects:latest.release'
				implementation libs.mockito.core
				implementation 'dev.gradleplugins:grava-publish:1.7' // GradleModuleMetadata
				implementation 'com.google.code.gson:gson:2.12.1' // "GradleModuleMetadataReader"
			}
		}
	}
}
